from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from loader import dp

from utils.db_api.db_commands import get_item, select_user, create_purchase, commit_payment


# reacts on pressed buy item
@dp.callback_query_handler(text_contains='buy')
async def buy_item(call: types.CallbackQuery, state: FSMContext):
    await call.answer(cache_time=30)
    user = await select_user(call.from_user.id)
    # gets item_id from callback of buy button
    item_id = int(call.data.split(':')[1])
    item = await get_item(item_id)
    # checks that the user has enough money on his balance for a purchase
    if user.balance >= item.price:
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:')
        await state.set_state('quantity')
        await state.update_data(item=item)
    else:
        await call.message.answer('–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n'
                                  '–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å')


# gets the number of items from the user's message
@dp.message_handler(state='quantity')
async def item_quantity(message: types.Message, state: FSMContext):
    item = (await state.get_data()).get('item')
    user = await select_user(user_id=message.from_user.id)

    try:
        quantity = int(message.text)
    except ValueError:
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        return
    # if the user wrote the quantity more then he actually can buy then  send: "you are too greedy"
    if item.price * quantity > user.balance:
        await message.answer('–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤\n'
                             '–í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞')
        return
    # ask a phone number with the button and hide it after a pressing
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=ReplyKeyboardMarkup(one_time_keyboard=True,
                                                                                     keyboard=[[
                                                                                         KeyboardButton(
                                                                                             text='–ü—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–º–µ—Ä',
                                                                                             request_contact=True)
                                                                                     ]], resize_keyboard=True))
    # save the whole amount and the quantity
    amount = item.price * quantity
    await state.update_data(quantity=quantity, amount=amount)
    await state.set_state('get_phone_number')


@dp.message_handler(state='get_phone_number', content_types=types.ContentType.CONTACT)
async def phone_number(message: types.Message, state: FSMContext):
    phone = message.contact.phone_number
    await state.update_data(phone_number=phone)
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–°—Ç—Ä–∞–Ω–∞, –ì–æ—Ä–æ–¥, –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å"')
    await state.set_state('get_address')


@dp.message_handler(state='get_address')
async def add_address(message: types.Message, state: FSMContext):
    await state.update_data(shipping_address=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:')
    await state.set_state('name_of_the_receiver')


@dp.message_handler(state='name_of_the_receiver')
async def make_purchase(message: types.Message, state: FSMContext):
    data = await state.get_data()

    buyer_id = message.from_user.id
    receiver = message.text
    item_id = data['item'].id
    item_quantity = data['quantity']
    amount = data['amount']
    phone = data['phone_number']
    address = data['shipping_address']
    # take the amount from a user's balance
    await commit_payment(user_id=buyer_id, amount=amount)
    # create purchase in the Purchase table of the database
    await create_purchase(buyer=buyer_id, receiver=receiver, item_id=item_id, quantity=item_quantity, amount=amount,
                          phone_number=phone, shipping_address=address, paid=True)
    await message.answer('–ü–æ–∫—É–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ üëå\n'
                         '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è(—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ—Ç)')
    await state.finish()


@dp.callback_query_handler(text_contains='cancel_purchase')
async def cancel_purchase(call: types.CallbackQuery, state: FSMContext):
    await call.answer(cache_time=30)
    await state.finish()
    await call.message.delete_reply_markup()
